# -*- coding: utf-8 -*-

require 'yaml'
require 'rake'
require 'rugged'
require 'builder'

#
# Load Configuration from package.yaml
#
$package = YAML.load_file("./package.yaml")


=begin rdoc

Get Version Name.
Version name is:
* The first 8 characters of the latest commit ID
* The branch name
=end
def version_name
  require 'rugged'
  repository = Rugged::Repository.new Rugged::Repository.discover "."
  reference  = repository.head
  
  commit_id = reference.log.last[:id_new]
  commit_count   = reference.log.length
  branch_name = reference.name.split("/").last

  commit_id[0..8] + "-" + branch_name
  #commit_count.to_s + '-' + branch_name
end

# Get the package name
def package_name
  "pkg_#{$package['name']}-#{version_name}"
end


# Path file Location
def package_file_path
  "./packages/#{$package['name']}/#{package_name}.zip"
end

# Get files to (not) be packaged
# @deprecated
def package_files
  package_files = Rake::FileList.new "**/*"
  package_files.exclude(/^(packages\/.*|Rakefile|\.git|README\.md)/)

  package_files
end

# Get the build area path
def build_area
  "./packages/#{$package['name']}-#{version_name}"
end
  
# Get the update manifest
def update_manifest
  document = Builder::XmlMarkup.new(:indent => 2)
  
  document.updates do |updates|
    updates.comment! "Update manifest: Generated by Builder Script at #{Time.now}"
    updates.update do |u|
      u.name $package['package']['name']
      u.description $package['package']['description']
      u.type 'package'
      u.version version_name
      u.infourl "https://github.com/mrzen/segment-joomla"
      u.client 'site'
      u.downloads do |d|
        d.downloadurl({:type => "full" , :format => "zip"}, "#{$package['package']['update_site']}/#{package_name}.zip")
      end
    end
  end

  document.target!
end

desc "Build the Components"
task :build_components do
  $package['contents']['components'].each { |c| build_component c }
end

def build_component(name)
  component_build_area = File.join(build_area, 'com_' + name)

  mkdir_p component_build_area

  {"/administrator" => "admin","" => "site"}.each do |context,target_context|
    # Do Languages
    language_dirs = Dir.glob(".#{context}/language/*")

    language_dirs.each do |language_dir|
      language = language_dir.split("/").last

      language_files = Rake::FileList.new(".#{context}/language/#{language}/*#{name}*")

      language_files.each do |language_file|
        copy_to_dir = File.join(component_build_area, target_context, "language" , language)
        mkdir_p copy_to_dir rescue nil
        cp language_file , copy_to_dir
      end
    end

    # Do the other stuff
    mkdir_p File.join(component_build_area , target_context)
    files = Rake::FileList.new(".#{context}/components/com_#{name}/**/*")
    
    files.each do |file_name|
      target_file_name = file_name.gsub(".#{context}/components/com_#{name}",target_context)
      if File.directory?(file_name)
        mkdir_p File.join(component_build_area, target_file_name)
      else
        copy_to = File.join(component_build_area, File.dirname(target_file_name))
        mkdir_p copy_to unless File.exist?(copy_to)
        cp file_name, File.join(copy_to,  File.basename(target_file_name)) 
      end
    end
  end
  
  # Build the manifest
  manifest_path = File.join(component_build_area , 'com_' + name + '.xml')
  manifest_file = File.open(manifest_path, 'w')
  manifest = Builder::XmlMarkup.new(:indent => 4, :target => manifest_file)

  manifest.extension({
                       :type => "component" , 
                       :version => $package['package']['version'] , 
                       :method => "upgrade"}) do |ext|

    ext.comment! "Manifest generated by builder script at #{Time.now}"

    ext.name 'com_' + name
    ext.description"COM_#{name.upcase}_XML_DESCRIPTION"
    ext.version version_name
    ext.copyright "Â© 2014 Mr.Zen Ltd."
    ext.author "Mr.Zen Ltd."
    ext.authorEmail "info@mrzen.com"
    ext.authorUrl "mrzen.com/travelzen"

    ext.install do |install|
      install.sql do |sql|
        sql.file({:driver => "mysql" , :charset => "utf8"}, "sql/install.mysql.utf8.sql")
      end
    end


    ext.uninstall do |uninstall|
      uninstall.sql do |sql|
        sql.file({:driver => "mysql" , :charset => "utf8"}, "sql/uninstall.mysql.utf8.sql")
      end
    end

    ext.update do |update|
      update.schemas do |schema|
        schema.schemapath({:type => "mysql"}, "admin/sql/updates")
      end
    end


    ext.scriptfile "script.php" if File.exist?( File.join(component_build_area , 'admin' , 'script.php') )
    
    ext.administration do |admin|
      admin.menu({:img => "components/com_#{name}/assets/menu_icon.png"}, "COM_#{name.upcase}_MENUTITLE")

      admin.languages do |languages|
        language_dirs = Dir.glob( File.join(component_build_area, 'admin', 'language', '*') )
        language_dirs.each do |language_dir|

          language_code = language_dir.split('/').last
          language_files = Dir.glob(File.join(language_dir , '*.ini'))

          language_files.each do |language_file|
            language_path = language_file.gsub(component_build_area , '')
            languages.language({:tag => language_code}, language_path)
          end # language_files.each
        end # language_dir.each
      end # admin.languages
                            

      admin.files({:folder => "admin"}) do |files|
        Dir.glob(File.join(component_build_area , 'admin' , '*')).each do |f|
          if File.directory? f
            files.folder File.basename( f )
          else
            files.filename File.basename( f )
          end
        end
      end # Admin files
    end   # Admin
  end     # Manifest

  manifest.target!
  manifest_file.flush
  manifest_file.close

  chdir(component_build_area) do
    sh %{zip -r ../com_#{name}.zip *}
  end

end

task :build_libraries do
  $package['contents']['libraries'].each do |lib|
    build_library lib
  end
end

def build_library(name)
  lib_build_area = File.join(build_area , 'lib_' + name)
    
  mkdir_p lib_build_area
  files = Rake::FileList.new("./libraries/#{name}/**/*")
  
  files.each do |file_name|
    new_file_name = file_name.gsub("./libraries/#{name}/",'')
    if File.directory?(file_name)
      mkdir_p File.join(lib_build_area, new_file_name)
    else
      copy_to = File.join(lib_build_area , File.dirname(new_file_name))
      mkdir_p copy_to unless File.exist?(copy_to)
      cp file_name, File.join(copy_to , File.basename(file_name))
    end
  end

  manifest_path = File.join(lib_build_area, 'lib_' + name + '.xml')
  manifest_file = File.open(manifest_path , 'w')
  manifest = Builder::XmlMarkup.new(:indent => 2, :target => manifest_file)
  
  manifest.extension({
                       :type => "library",
                       :version => $package['package']['version'],
                       :method => "upgrade"}) do |ext|
    ext.name "Library: #{name}"
    ext.libraryname name
    ext.version version_name
    ext.copyright "Â© 2014 Mr.Zen Ltd."
    ext.author "Mr.Zen Ltd."
    ext.authorEmail "info@mrzen.com"
    
    ext.files do |files|
      chdir(lib_build_area) do
        Dir.glob('*').each do |f|
          if File.directory? f
            files.folder f
          else
            files.file f
          end # File.directory?
        end # Dir.glob.each
      end # chdir
    end # ext.files
  end # ext

  manifest.target!
  manifest_file.flush
  manifest_file.close

  chdir(lib_build_area) do
    sh %{zip -r ../lib_#{name}.zip *}
  end
end

task :build_plugins do
  $package['contents']['plugins'].each do |g|
    g.last.each do |p|
      build_plugin( g.first , p )
    end
  end
end

def build_plugin(group, name)

  plugin_build_area = File.join(build_area , 'plg_'+ group + '_' + name)
  
  mkdir_p plugin_build_area

  files = Rake::FileList.new("./plugins/#{group}/#{name}/**/*")
  
  files.each do |file_name|
    new_file_name = file_name.gsub("./plugins/#{group}/#{name}",'')
    if File.directory? file_name
      mkdir_p File.join(plugin_build_area, new_file_name)
    else
      copy_to = File.join(plugin_build_area , File.dirname(new_file_name))
      mkdir_p copy_to unless File.exist? copy_to
      cp file_name, File.join( copy_to, File.basename(new_file_name))
    end
  end

  chdir(plugin_build_area) do
    sh %{zip -r ../plg_#{group}_#{name}.zip *}
  end
end

desc "Generate Package Manifest"
task :package_manifest do
  require 'builder'

  manifest_path = File.join(build_area, 'pkg_' + $package['name'] + '.xml')
  manifest_file = File.open(manifest_path, 'w')

  manifest = Builder::XmlMarkup.new(:indent => 2, :target => manifest_file)
  manifest.extension({:type => "package" , :version => $package['package']['version']}) do |ext|
    ext.comment! "Package Manifest Generated by Builder Script at #{Time.now}"
    ext.name $package['package']['name']
    ext.description $package['package']['description']
    ext.author $package['package']['author']
    ext.packagename $package['name']
    ext.update $package['package']['update_site']

    ext.files do |package_part|
      $package['contents']['components'].each do |component|
        ext.file({:type => "component" , :id => component} , "com_#{component}.zip")
      end # Components

      $package['contents']['plugins'].keys.each do |group|
        $package['contents']['plugins'][group].each do |plugin|
          ext.file({:type => "plugin" , :id => plugin , :group => group}, "plg_#{group}_#{plugin}.zip")
        end # Plugins
      end   # Plugin Groups

      $package['contents']['libraries'].each do |library|
        ext.file({:type => "library", :id => library}, "lib_#{library}.zip")
      end # Libraries
    end # Package Parts
  end # Document (Extension)

  manifest.target!
  manifest_file.flush
  manifest_file.close
end
  
# Prepare files in `package_files` for packaging
directory build_area => [:build_libraries, :build_components, :build_plugins, :package_manifest]

# Build the package zip
desc 'Build package zip archive'
task :package => [package_file_path]

file package_file_path => [build_area] do
  chdir(build_area) do
    sh "zip -r ../#{package_name}.zip *.zip pkg_#{$package['name']}.xml"
  end
end


# Heplper tasks
desc "List files to be packaged"
task :show_files do
  puts package_files
end

desc "Show update manifest"
task :show_manifest do
  puts update_manifest
end

desc "Clean up"
task :clean do
  rm_rf "./packages"
end

# Editor things...
# -*- coding: utf-8 -*-
# -*- mode: ruby -*-
# vim: ft=ruby tw=2 et
